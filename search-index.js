var searchIndex = JSON.parse('{\
"transit_grid":{"doc":"","t":"AAAAGGEGNDDNLLLLLLLLLLLLLLLLLLMLMMLLLLLLMLMLMLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLMMLLLLLLLLLLMMLLLLLLLLLIKKK","n":["core","graphs","operations","prelude","EdgeId","IdType","NodeAccessability","NodeId","ReachableNodes","TransitEdge","TransitNode","UnreachableNodes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","eq","equivalent","equivalent","from","from","from","from","hash","id","id","into","into","into","is_within","is_within","is_within","location","partial_cmp","path","reachable_nodes","to","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unreachable_nodes","PhysicalGraph","TopologyGraph","TransitNetwork","add_edge","add_edge","add_edge_with_accessibility","add_node","add_node","add_transit_edge","add_transit_node","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","graph","graph","has_incoming","into","into","into","is_within","is_within","is_within","new","new","new","physical_graph","topology_graph","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","TransitNetworkModifier","add_edge","add_edge_with_accessibility","add_node"],"q":["transit_grid","","","","transit_grid::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::graphs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::operations","","",""],"d":["","","","","","","Enum representing the accessibility of nodes in the …","","","<code>TransitEdge</code> represents a connection between two <code>TransitNode</code>…","<code>TransitNode</code> represents a node in the transit network.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns a reference to the vector of reachable nodes if …","","","","","","","","","","","","","Returns a reference to the vector of unreachable nodes if …","<code>PhysicalGraph</code> represents the physical layout of the …","Represents the topological graph of the transit network.","<code>TransitNetwork</code> represents a transit network as a graph …","Adds a <code>TopoEdge</code> to the topological graph.","Adds a <code>TransitEdge</code> to the physical graph of the network.","","Adds a Node with a <code>NodeId</code> to the topological graph. This …","Adds a <code>TransitNode</code> to the physical graph of the network.","Adds a <code>TransitEdge</code> to the <code>PhysicalGraph</code>.","Adds a <code>TransitNode</code> to the <code>PhysicalGraph</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Checks if a node has an incoming edge in the topological …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new, empty <code>PhysicalGraph</code>.","Creates a new instance of <code>TopologyGraph</code>.","","","","","","","","","","","","","<code>TransitNetworkModifier</code> is a trait for modifying a transit …","Adds a <code>TransitEdge</code> to the network.","Adds a <code>TransitEdge</code> to the network with a given …","Adds a <code>TransitNode</code> to the network."],"i":[0,0,0,0,0,0,0,0,12,0,0,12,12,2,4,12,2,4,2,4,2,4,2,2,4,2,4,12,2,4,4,2,2,4,12,2,4,12,2,4,2,2,4,12,4,2,4,12,2,4,12,2,4,12,2,4,12,0,0,0,16,19,19,16,19,20,20,20,16,19,20,16,19,20,16,19,20,16,16,20,16,19,20,16,19,20,16,19,19,19,20,16,19,20,16,19,20,16,19,0,22,22,22],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[4,[[0,[1,3]]]]],[[4,[[0,[1,3]]]]]],[[]],[[]],[[[2,[5]],2],6],[[[2,[7]],2],8],[[[4,[[0,[7,3]]]],4],8],[[],8],[[],8],[[]],[[]],[[]],0,[[[2,[9]]]],0,0,[[]],[[]],[[]],[[],8],[[],8],[[],8],0,[[[2,[10]],2],[[11,[6]]]],0,[12,[[11,[13]]]],0,[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[12,[[11,[13]]]],0,0,0,[[16,17,18,18]],[[[19,[3]],[4,[3]]]],[[[19,[3]],[4,[3]],12]],[[16,18]],[[[19,[3]],2],18],[[[20,[3]],[4,[3]]],17],[[[20,[3]],2],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[16,21],8],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],[[20,[3]]]],[[],16],[[],[[19,[3]]]],0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],0,[4],[[4,12]],[2,18]],"p":[[8,"Clone"],[3,"TransitNode"],[8,"CoordNum"],[3,"TransitEdge"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[8,"Hash"],[8,"PartialOrd"],[4,"Option"],[4,"NodeAccessability"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"TopologyGraph"],[6,"EdgeId"],[6,"NodeId"],[3,"TransitNetwork"],[3,"PhysicalGraph"],[3,"NodeIndex"],[8,"TransitNetworkModifier"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
