var searchIndex = JSON.parse('{\
"transit_grid":{"doc":"","t":"AAAAEGGGNDDNLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLMLMLMLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLMMLLMMLLLLLLLLLLLLLLMLMMLLLLMLLLLLLLLLLLLLLLIKKK","n":["core","graphs","operations","prelude","Accessability","EdgeId","IdType","NodeId","ReachableNodes","TransitEdge","TransitNode","UnreachableNodes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","hash","id","id","into","into","into","is_within","is_within","is_within","location","partial_cmp","path","reachable_nodes","to","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unreachable_nodes","PhysicalGraph","TopoEdge","TopoNode","TopologyGraph","TransitNetwork","add_edge","add_edge","add_edge_with_accessibility","add_edge_with_accessibility","add_node","add_node","add_transit_edge","add_transit_node","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","default","default","edge_id","eq","eq","equivalent","equivalent","find_node_index_with_edges","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_other_toponode","graph","graph","has_incoming","hash","id","id","into","into","into","into","into","is_within","is_within","is_within","is_within","is_within","new","new","new","no_edges_in_direction","node_id","partial_cmp","physical_graph","to","to_owned","to_owned","to_string","to_string","topology_graph","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","TransitNetworkModifier","add_edge","add_edge_with_accessibility","add_node"],"q":["transit_grid","","","","transit_grid::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::graphs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::operations","","",""],"d":["","","","","Enum representing the accessibility of nodes in the …","","","","","<code>TransitEdge</code> represents a connection between two <code>TransitNode</code>…","<code>TransitNode</code> represents a node in the transit network.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns a reference to the vector of reachable nodes if …","","","","","","","","","","","","","","Returns a reference to the vector of unreachable nodes if …","<code>PhysicalGraph</code> represents the physical layout of the …","","","Represents the topological graph of the transit network.","<code>TransitNetwork</code> represents a transit network as a graph …","Adds a <code>TopoEdge</code> to the topological graph.","Adds a <code>TransitEdge</code> to the physical graph of the network.","Adds an edge with a certain accessibility into the graph.","","Adds a Node with a <code>NodeId</code> to the topological graph. This …","Adds a <code>TransitNode</code> to the physical graph of the network.","Adds a <code>TransitEdge</code> to the <code>PhysicalGraph</code>.","Adds a <code>TransitNode</code> to the <code>PhysicalGraph</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NodeIndex</code> of the <code>NodeId</code> that does not have any …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the <code>NodeIndex</code> of the other <code>TopoNode</code> for a given …","","","Checks if a node has an incoming edge in the topological …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Creates a new, empty <code>PhysicalGraph</code>.","Creates a new instance of <code>TopologyGraph</code>.","","Checks if there are no edges in the specified direction …","","","","","","","","","","","","","","","","","","","","","","","","","<code>TransitNetworkModifier</code> is a trait for modifying a transit …","Adds a <code>TransitEdge</code> to the network.","Adds a <code>TransitEdge</code> to the network with a given …","Adds a <code>TransitNode</code> to the network."],"i":[0,0,0,0,0,0,0,0,1,0,0,1,1,3,5,1,3,5,1,3,5,1,3,5,3,5,1,3,5,1,3,5,1,5,1,3,5,5,3,3,5,1,3,5,1,3,5,3,3,5,1,5,1,3,5,1,3,5,1,3,5,1,3,5,1,0,0,0,0,0,19,22,19,22,19,22,23,23,23,19,22,24,25,23,19,22,24,25,24,25,24,25,24,23,19,22,25,24,25,24,25,19,24,24,25,25,23,19,22,24,25,25,19,23,19,19,24,24,25,23,19,22,24,25,23,19,22,24,25,23,19,22,19,24,24,22,25,24,25,24,25,22,23,19,22,24,25,23,19,22,24,25,23,19,22,24,25,0,29,29,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[[3,[2]]],[[3,[2]]]],[[[5,[[0,[2,4]]]]],[[5,[[0,[2,4]]]]]],[[]],[[]],[[]],[[[3,[6]],3],7],[[],[[5,[4]]]],[[1,1],8],[[[3,[9]],3],8],[[[5,[[0,[9,4]]]],5],8],[[],8],[[],8],[[],8],[[1,10],11],[[[5,[[0,[12,4]]]],10],11],[[]],[[]],[[]],0,[[[3,[13]]]],0,0,[[]],[[]],[[]],[[],8],[[],8],[[],8],0,[[[3,[14]],3],[[15,[7]]]],0,[1,[[15,[16]]]],0,[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[1,[[15,[16]]]],0,0,0,0,0,[[19,20,21,21]],[[[22,[4]],[5,[4]]]],[[19,20,21,21,1]],[[[22,[4]],[5,[4]],1]],[[19,21]],[[[22,[4]],3],21],[[[23,[4]],[5,[4]]],20],[[[23,[4]],3],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,24],[25,25],[[]],[[]],[[24,24],7],[[],[[23,[4]]]],[[],19],[[],[[22,[4]]]],0,[[24,24],8],[[25,25],8],[[],8],[[],8],[[19,21,[16,[21]],26],[[15,[27]]]],[[24,10],11],[[24,10],11],[[25,10],11],[[25,10],11],[[]],[[]],[[]],[[]],[[]],0,[[19,27],[[15,[27]]]],0,0,[[19,27],8],[24],0,0,[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],[[23,[4]]]],[[],19],[[],[[22,[4]]]],[[19,27,[16,[21]],26],8],0,[[24,24],[[15,[7]]]],0,0,[[]],[[]],[[],28],[[],28],0,[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],0,[5],[[5,1]],[3,21]],"p":[[4,"Accessability"],[8,"Clone"],[3,"TransitNode"],[8,"CoordNum"],[3,"TransitEdge"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Hash"],[8,"PartialOrd"],[4,"Option"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"TopologyGraph"],[6,"EdgeId"],[6,"NodeId"],[3,"TransitNetwork"],[3,"PhysicalGraph"],[3,"TopoNode"],[3,"TopoEdge"],[4,"Direction"],[3,"NodeIndex"],[3,"String"],[8,"TransitNetworkModifier"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
