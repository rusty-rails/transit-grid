var searchIndex = JSON.parse('{\
"transit_grid":{"doc":"TransitGrid","t":"AAAAAIIKAKKIKEGGGNDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLMLMLMMLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLLMMLLMMLLLLLLLLLLLLLLLLLLMLMLLLLLMLLLLMLLLLLLLLLLLLLLLIIKKKKK","n":["algorithms","core","graphs","operations","prelude","ShortestPath","ShortestPathWithAccessability","calc_edge_cost","edge_length","find_shortest_path","find_shortest_path_with_accessability","EdgeLength","length","Accessability","EdgeId","IdType","NodeId","ReachableNodes","TransitEdge","TransitNode","UnreachableNodes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","eq","eq","eq","equivalent","equivalent","equivalent","euclidean_length","fmt","fmt","fmt","from","from","from","hash","haversine_length","id","id","into","into","into","is_within","is_within","is_within","length","location","partial_cmp","path","reachable_nodes","source","target","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unreachable_nodes","PhysicalGraph","TopoEdge","TopoNode","TopologyGraph","TransitNetwork","add_edge","add_edge","add_edge_with_accessibility","add_edge_with_accessibility","add_node","add_node","add_transit_edge","add_transit_node","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc_edge_cost","clone","clone","clone_into","clone_into","cmp","default","default","default","edge_id","edge_is_in_neighbors_direction","eq","eq","equivalent","equivalent","find_edge_indices","find_node_index_with_edges","find_shortest_path","find_shortest_path_with_accessability","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_edge_by_id","get_other_toponode","get_transit_edge","get_transit_edge_by_id","graph","graph","has_incoming","hash","id","id","id_to_index","id_to_index","index_to_id","index_to_id","into","into","into","into","into","is_within","is_within","is_within","is_within","is_within","new","new","new","no_edges_in_direction","node_id","partial_cmp","physical_graph","repair","repair_edge","repair_edge","repair_edge","reverse_edge","to","to_owned","to_owned","to_string","to_string","topology_graph","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","TransitNetworkModifier","TransitNetworkRepairer","add_edge","add_edge_with_accessibility","add_node","repair","repair_edge"],"q":["transit_grid","","","","","transit_grid::algorithms","","","","","","transit_grid::algorithms::edge_length","","transit_grid::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::graphs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::operations","","","","","",""],"d":["TransitNet is a Rust library for representing, …","This module provides basic structures for representing a …","This module contains the definition and implementation of …","This module provides abstractions and implementations for …","The <code>prelude</code> module re-exports the most commonly used items …","<code>ShortestPath</code> trait provides functionality to compute …","This trait provides methods for finding the shortest path …","Calculates the cost of traversing from one node to …","Edge length functions for <code>TransitEdge</code>.","Finds the shortest path from the start node to the …","Finds the shortest path between two nodes considering the …","EdgeLength trait provides the length of an element. It is …","Returns the Euclidean length of the element.","Re-export of the <code>Accessability</code> enum from the <code>accessability</code> …","Type alias for an edge identifier.","Type alias for an identifier.","Type alias for a node identifier.","A variant holding a vector of reachable node IDs.","Structure representing a connection between two <code>TransitNode</code>…","Structure representing a node in the transit network.","A variant holding a vector of unreachable node IDs.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","A unique identifier for the edge.","A unique identifier for the node.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The location of the node, represented by a generic type <code>T</code>.","","The path of the edge, represented as a <code>LineString</code>.","Returns a reference to the vector of reachable nodes if …","The identifier of the node where the edge starts.","The identifier of the node where the edge ends.","","","","","","","","","","","","","Returns a reference to the vector of unreachable nodes if …","Represents the physical layout of the transit network.","Represents an edge in the <code>TopologyGraph</code>.","Represents a node in the <code>TopologyGraph</code>.","Represents the topological graph of the transit network.","Represents a transit network as a graph with transit nodes …","Adds a <code>TopoEdge</code> to the topological graph.","Adds a <code>TransitEdge</code> to the physical graph of the network.","Adds an edge with a certain accessibility into the graph.","","Adds a Node with a <code>NodeId</code> to the topological graph. This …","Adds a <code>TransitNode</code> to the physical graph of the network.","Adds a <code>TransitEdge</code> to the <code>PhysicalGraph</code>.","Adds a <code>TransitNode</code> to the <code>PhysicalGraph</code>.","","","","","","","","","","","","","","","","","","","","The custom identifier of the edge.","Checks if an edge is in the same direction as its …","","","","","Returns the indices of edges between two nodes in all …","Returns the <code>NodeIndex</code> of the <code>NodeId</code> that does not have any …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The custom identifier of the node where the edge …","Returns a reference to the <code>TransitNode</code> with the given ID.","Returns the <code>NodeIndex</code> of the other <code>TopoNode</code> for a given …","Returns a reference to the <code>TransitEdge</code> connecting the two …","Returns a reference to the <code>TransitEdge</code> with the specified …","Underlying undirected graph.","the inner graph","Checks if a node has an incoming edge in the topological …","","The index of the node in the petgraph.","The index of the edge in the petgraph.","Converts a <code>NodeId</code> to a <code>NodeIndex</code>.","Returns the <code>NodeIndex</code> corresponding to a given <code>NodeId</code>.","Converts a <code>NodeIndex</code> to a <code>NodeId</code>.","Returns the <code>NodeId</code> corresponding to a given <code>NodeIndex</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Creates a new, empty <code>PhysicalGraph</code>.","Creates a new instance of <code>TopologyGraph</code>.","Constructs a new <code>TransitNetwork</code> with an empty <code>PhysicalGraph</code>…","Checks if there are no edges in the specified direction …","The custom identifier of the node.","","The physical graph representing the transit network.","","Repairs a physical edge in the <code>PhysicalGraph</code> based on its …","Repairs the direction of edges in a graph if they are …","","Reverse the direction of a given edge.","The custom identifier of the node where the edge ends.","","","","","The topological graph representing the transit network.","","","","","","","","","","","","","","","","Trait providing methods for modifying a transit network.","A trait for repairing transit networks, particularly for …","Adds a <code>TransitEdge</code> to the network.","Adds a <code>TransitEdge</code> to the network with a given …","Adds a <code>TransitNode</code> to the network.","Repairs the entire network.","Repairs the edge between two nodes in the network."],"i":[0,0,0,0,0,0,0,37,0,38,37,0,39,0,0,0,0,2,0,0,2,8,2,9,8,2,9,8,2,9,8,2,9,9,8,8,2,9,8,2,9,8,8,2,9,8,2,9,9,8,8,9,8,2,9,8,2,9,8,9,9,8,2,8,8,8,2,9,8,2,9,8,2,9,8,2,9,2,0,0,0,0,0,24,27,24,27,24,27,28,28,28,24,27,31,32,28,24,27,31,32,27,31,32,31,32,31,28,24,27,32,24,31,32,31,32,24,24,27,27,31,31,32,32,28,24,27,31,32,32,27,24,28,28,28,24,24,31,31,32,28,24,28,24,28,24,27,31,32,28,24,27,31,32,28,24,27,24,31,31,27,27,28,24,27,24,32,31,32,31,32,27,28,24,27,31,32,28,24,27,31,32,28,24,27,31,32,0,0,40,40,40,41,41],"f":[0,0,0,0,0,0,0,[[1,1,2],3],0,[[1,1],[[5,[[4,[1]]]]]],[[1,1,2],5],0,[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[6,7]]]]],[[8,[[0,[6,7]]]]]],[2,2],[[[9,[6]]],[[9,[6]]]],[[]],[[]],[[]],[[[9,[10]],9],11],[[],[[8,[7]]]],[[[8,[[0,[12,7]]]],8],13],[[2,2],13],[[[9,[12]],9],13],[[],13],[[],13],[[],13],[[[8,[[0,[14,15]]]]],[[0,[14,15]]]],[[[8,[[0,[16,7]]]],17],18],[[2,17],18],[[[9,[16]],17],18],[[]],[[]],[[]],[[[9,[19]]]],[[[8,[[0,[14,20]]]]],[[0,[14,20]]]],0,0,[[]],[[]],[[]],[[],13],[[],13],[[],13],[[[8,[[0,[14,20,15]]]]],[[0,[14,20,15]]]],0,[[[9,[21]],9],[[5,[11]]]],0,[2,[[5,[4]]]],0,0,[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[2,[[5,[4]]]],0,0,0,0,0,[[24,25,1,1]],[[[27,[26,7]],[8,[7]]]],[[24,25,1,1,2]],[[[27,[26,7]],[8,[7]],2]],[[24,1]],[[[27,[26,7]],[9,[26]]],1],[[[28,[26,7]],[8,[7]]],29],[[[28,[26,7]],[9,[26]]],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[27,[26,7]],1,1,2],3],[31,31],[32,32],[[]],[[]],[[31,31],11],[[],[[28,[26,7]]]],[[],24],[[],[[27,[26,7]]]],0,[[24,29],13],[[31,31],13],[[32,32],13],[[],13],[[],13],[[24,1,1],5],[[24,1,[4,[1]],33],[[5,[30]]]],[[[27,[26,7]],1,1],[[5,[[4,[1]]]]]],[[[27,[26,7]],1,1,2],5],[[31,17],18],[[31,17],18],[[32,17],18],[[32,17],18],[[]],[[]],[[]],[[]],[[]],0,[[[27,[26,7]],25],[[5,[8]]]],[[24,30],[[5,[30]]]],[[[28,[26,7]],1,1],[[5,[8]]]],[[[28,[26,7]],25],[[5,[8]]]],0,0,[[24,30],13],[31],0,0,[[[28,[26,7]],1],30],[[24,1]],[[[28,[26,7]],30],1],[[24,30],1],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],[[28,[26,7]]]],[[],24],[[],[[27,[26,7]]]],[[24,30,[4,[1]],33],13],0,[[31,31],[[5,[11]]]],0,[[[27,[[0,[26,[35,[7,[34,[7]]]]]],7]]]],[[[28,[26,7]],1,1]],[[24,1,1]],[[[27,[[0,[26,[35,[7,[34,[7]]]]]],7]],1,1]],[[24,29]],0,[[]],[[]],[[],36],[[],36],0,[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,[8],[[8,2]],[9,1],[[]],[[1,1]]],"p":[[6,"NodeId"],[4,"Accessability"],[15,"f64"],[3,"Vec"],[4,"Option"],[8,"Clone"],[8,"CoordNum"],[3,"TransitEdge"],[3,"TransitNode"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[8,"CoordFloat"],[8,"Sum"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[8,"FromPrimitive"],[8,"PartialOrd"],[4,"Result"],[3,"TypeId"],[3,"TopologyGraph"],[6,"EdgeId"],[8,"Copy"],[3,"TransitNetwork"],[3,"PhysicalGraph"],[3,"EdgeIndex"],[3,"NodeIndex"],[3,"TopoNode"],[3,"TopoEdge"],[4,"Direction"],[3,"Coord"],[8,"EuclideanDistance"],[3,"String"],[8,"ShortestPathWithAccessability"],[8,"ShortestPath"],[8,"EdgeLength"],[8,"TransitNetworkModifier"],[8,"TransitNetworkRepairer"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
