var searchIndex = JSON.parse('{\
"transit_grid":{"doc":"","t":"AAAAAIIKKEGGGNDDNLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLMLMLMLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLMMLLMMLLLLLLLLLLLLLLLLLLMLMMLLLLMLLLLLLLLLLLLLLLIKKK","n":["algorithms","core","graphs","operations","prelude","ShortestPath","ShortestPathWithAccessability","find_shortest_path","find_shortest_path_with_accessability","Accessability","EdgeId","IdType","NodeId","ReachableNodes","TransitEdge","TransitNode","UnreachableNodes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","hash","id","id","into","into","into","is_within","is_within","is_within","location","partial_cmp","path","reachable_nodes","to","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unreachable_nodes","PhysicalGraph","TopoEdge","TopoNode","TopologyGraph","TransitNetwork","add_edge","add_edge","add_edge_with_accessibility","add_edge_with_accessibility","add_node","add_node","add_transit_edge","add_transit_node","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","default","default","edge_id","eq","eq","equivalent","equivalent","find_node_index_with_edges","find_shortest_path","find_shortest_path_with_accessability","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_other_toponode","graph","graph","has_incoming","hash","id","id","id_to_index","id_to_index","index_to_id","index_to_id","into","into","into","into","into","is_within","is_within","is_within","is_within","is_within","new","new","new","no_edges_in_direction","node_id","partial_cmp","physical_graph","to","to_owned","to_owned","to_string","to_string","topology_graph","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","TransitNetworkModifier","add_edge","add_edge_with_accessibility","add_node"],"q":["transit_grid","","","","","transit_grid::algorithms","","","","transit_grid::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::graphs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::operations","","",""],"d":["","","","","","","","","Finds the shortest path between two nodes in the network.","Enum representing the accessibility of nodes in the …","","","","","<code>TransitEdge</code> represents a connection between two <code>TransitNode</code>…","<code>TransitNode</code> represents a node in the transit network.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns a reference to the vector of reachable nodes if …","","","","","","","","","","","","","","Returns a reference to the vector of unreachable nodes if …","<code>PhysicalGraph</code> represents the physical layout of the …","","","Represents the topological graph of the transit network.","<code>TransitNetwork</code> represents a transit network as a graph …","Adds a <code>TopoEdge</code> to the topological graph.","Adds a <code>TransitEdge</code> to the physical graph of the network.","Adds an edge with a certain accessibility into the graph.","","Adds a Node with a <code>NodeId</code> to the topological graph. This …","Adds a <code>TransitNode</code> to the physical graph of the network.","Adds a <code>TransitEdge</code> to the <code>PhysicalGraph</code>.","Adds a <code>TransitNode</code> to the <code>PhysicalGraph</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NodeIndex</code> of the <code>NodeId</code> that does not have any …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the <code>NodeIndex</code> of the other <code>TopoNode</code> for a given …","","","Checks if a node has an incoming edge in the topological …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Creates a new, empty <code>PhysicalGraph</code>.","Creates a new instance of <code>TopologyGraph</code>.","","Checks if there are no edges in the specified direction …","","","","","","","","","","","","","","","","","","","","","","","","","<code>TransitNetworkModifier</code> is a trait for modifying a transit …","Adds a <code>TransitEdge</code> to the network.","Adds a <code>TransitEdge</code> to the network with a given …","Adds a <code>TransitNode</code> to the network."],"i":[0,0,0,0,0,0,0,31,32,0,0,0,0,4,0,0,4,4,6,8,4,6,8,4,6,8,4,6,8,6,8,4,6,8,4,6,8,4,6,8,4,6,8,8,6,6,8,4,6,8,4,6,8,6,6,8,4,8,4,6,8,4,6,8,4,6,8,4,6,8,4,0,0,0,0,0,20,23,20,23,20,23,24,24,24,20,23,27,28,24,20,23,27,28,27,28,27,28,27,24,20,23,28,27,28,27,28,20,23,23,27,27,28,28,24,20,23,27,28,28,20,24,20,20,27,27,28,24,20,24,20,24,20,23,27,28,24,20,23,27,28,24,20,23,20,27,27,23,28,27,28,27,28,23,24,20,23,27,28,24,20,23,27,28,24,20,23,27,28,0,33,33,33],"f":[0,0,0,0,0,0,0,[[1,1],[[3,[[2,[1]]]]]],[[1,1,4],3],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[[[6,[5]]],[[6,[5]]]],[[[8,[[0,[5,7]]]]],[[8,[[0,[5,7]]]]]],[[]],[[]],[[]],[[[6,[9]],6],10],[[],[[8,[7]]]],[[4,4],11],[[[6,[12]],6],11],[[[8,[[0,[12,7]]]],8],11],[[],11],[[],11],[[],11],[[4,13],14],[[[6,[15]],13],14],[[[8,[[0,[15,7]]]],13],14],[[]],[[]],[[]],0,[[[6,[16]]]],0,0,[[]],[[]],[[]],[[],11],[[],11],[[],11],0,[[[6,[17]],6],[[3,[10]]]],0,[4,[[3,[2]]]],0,[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[4,[[3,[2]]]],0,0,0,0,0,[[20,21,1,1]],[[[23,[22,7]],[8,[7]]]],[[20,21,1,1,4]],[[[23,[22,7]],[8,[7]],4]],[[20,1]],[[[23,[22,7]],[6,[22]]],1],[[[24,[22,7]],[8,[7]]],25],[[[24,[22,7]],[6,[22]]],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[[]],[[]],[[27,27],10],[[],[[24,[22,7]]]],[[],20],[[],[[23,[22,7]]]],0,[[27,27],11],[[28,28],11],[[],11],[[],11],[[20,1,[2,[1]],29],[[3,[26]]]],[[[23,[22,7]],1,1],[[3,[[2,[1]]]]]],[[[23,[22,7]],1,1,4],3],[[27,13],14],[[27,13],14],[[28,13],14],[[28,13],14],[[]],[[]],[[]],[[]],[[]],0,[[20,26],[[3,[26]]]],0,0,[[20,26],11],[27],0,0,[[[24,[22,7]],1],26],[[20,1]],[[[24,[22,7]],26],1],[[20,26],1],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],[[24,[22,7]]]],[[],20],[[],[[23,[22,7]]]],[[20,26,[2,[1]],29],11],0,[[27,27],[[3,[10]]]],0,0,[[]],[[]],[[],30],[[],30],0,[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],0,[8],[[8,4]],[6,1]],"p":[[6,"NodeId"],[3,"Vec"],[4,"Option"],[4,"Accessability"],[8,"Clone"],[3,"TransitNode"],[8,"CoordNum"],[3,"TransitEdge"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Hash"],[8,"PartialOrd"],[4,"Result"],[3,"TypeId"],[3,"TopologyGraph"],[6,"EdgeId"],[8,"Copy"],[3,"TransitNetwork"],[3,"PhysicalGraph"],[3,"EdgeIndex"],[3,"NodeIndex"],[3,"TopoNode"],[3,"TopoEdge"],[4,"Direction"],[3,"String"],[8,"ShortestPath"],[8,"ShortestPathWithAccessability"],[8,"TransitNetworkModifier"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
