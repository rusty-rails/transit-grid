var searchIndex = JSON.parse('{\
"transit_grid":{"doc":"","t":"AAAAGGGDGDGDDLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLMMMMLLLLLLLLMMLLMMMLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLMMLLLLLLLLLLMMLLLLLLLLLIKK","n":["core","graphs","operations","prelude","EdgeId","IdType","NodeId","TopoEdge","TopoEdgeId","TopoNode","TopoNodeId","TransitEdge","TransitNode","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","edge_id","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","from","from","from","from","from","from","hash","hash","id","id","id","id","into","into","into","into","is_within","is_within","is_within","is_within","location","node_id","partial_cmp","partial_cmp","path","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","PhysicalGraph","TopologyGraph","TransitNetwork","add_edge","add_edge","add_node","add_node","add_transit_edge","add_transit_node","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","graph","graph","has_incoming","into","into","into","is_within","is_within","is_within","new","new","new","physical_graph","topology_graph","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","TransitNetworkModifier","add_edge","add_node"],"q":["transit_grid","","","","transit_grid::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::graphs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","transit_grid::operations","",""],"d":["","","","","","","","","","","","<code>TransitEdge</code> represents a connection between two <code>TransitNode</code>…","<code>TransitNode</code> represents a node in the transit network.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>PhysicalGraph</code> represents the physical layout of the …","Represents the topological graph of the transit network.","<code>TransitNetwork</code> represents a transit network as a graph …","Adds a <code>TopoEdge</code> to the topological graph.","Adds a <code>TransitEdge</code> to the physical graph of the network.","Adds a <code>TopoNode</code> to the topological graph.","Adds a <code>TransitNode</code> to the physical graph of the network.","Adds a <code>TransitEdge</code> to the <code>PhysicalGraph</code>.","Adds a <code>TransitNode</code> to the <code>PhysicalGraph</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Checks if a node has an incoming edge in the topological …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new, empty <code>PhysicalGraph</code>.","Creates a new instance of <code>TopologyGraph</code>.","","","","","","","","","","","","","<code>TransitNetworkModifier</code> is a trait for modifying a transit …","Adds a <code>TransitEdge</code> to the network.","Adds a <code>TransitNode</code> to the network."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,5,6,2,4,5,6,2,4,5,6,2,4,5,6,2,5,6,2,4,5,6,2,4,5,6,2,4,5,6,4,6,2,5,2,4,5,6,2,4,5,6,2,4,5,6,2,5,2,5,4,4,6,2,4,5,6,2,4,5,6,2,4,5,6,2,4,5,6,0,0,0,16,17,16,17,20,20,20,16,17,20,16,17,20,16,17,20,16,16,20,16,17,20,16,17,20,16,17,17,17,20,16,17,20,16,17,20,16,17,0,21,21],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[4,[[0,[1,3]]]]],[[4,[[0,[1,3]]]]]],[5,5],[6,6],[[]],[[]],[[]],[[]],[[[2,[7]],2],8],[[5,5],8],0,[[[2,[9]],2],10],[[[4,[[0,[9,3]]]],4],10],[[5,5],10],[[6,6],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,0,[[[2,[11]]]],[5],0,0,0,0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],0,0,[[[2,[12]],2],[[13,[8]]]],[[5,5],[[13,[8]]]],0,0,0,[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],0,0,0,[[16,6]],[[[17,[3]],[4,[3]]]],[[16,5],18],[[[17,[3]],2],19],[[[20,[3]],[4,[3]]]],[[[20,[3]],2],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[16,18],10],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],[[20,[3]]]],[[],16],[[],[[17,[3]]]],0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],0,[4],[2,19]],"p":[[8,"Clone"],[3,"TransitNode"],[8,"CoordNum"],[3,"TransitEdge"],[3,"TopoNode"],[3,"TopoEdge"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[8,"Hash"],[8,"PartialOrd"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"TopologyGraph"],[3,"TransitNetwork"],[6,"TopoNodeId"],[6,"NodeId"],[3,"PhysicalGraph"],[8,"TransitNetworkModifier"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
